bez vsech techto prikazu se obejdeme s pouziti GitHubDesktop az na řešní konfliktů?
clear prikaz pro vycisteni okna
po instalaci apod. 
git config --list //prehled nastavenych pravidel
git config --global user.name "Petr Novák" //nastaveni jmena uzivatele gitu
git config --global user.email "petr@novek.com" 

Vytvoreni repository
---------------------
git status
git init //spusteno v dannem prostoru (pokud jiz existuje tak je prepsan)
deli se na :
1)working area(mistni slozka- zalozi se prikazem git init), 
2)stage area (sledovane ale necomittle po prikaze git add .), 
3)local repository(zmeny propsane do gitu-) prikazem
  git commit -m "e.g. Initial commit" (-m = message "text our message")
or
git config --global core.editor "'C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst -nosession" (prikaz nastavujici pojmenovani commitů pres aplikaci notepad-nastavuje ho defaultne)
-----------------------
git log --oneline(vypise podrobnosti a vsechny commity-moznost ulozit do souboru. ukoncit vypis klavese q)
------------------------------
vymazani zaznamu HEAD (pri obnove smazaneho a sledovaneho souboru (vratime se k predchozimu commitu))
git reset HEAD slouzi pro navrat prikazu add
git checkout . se vrati k predchozimu commitu
git push (nahrava se na remote, ale musi již být napárovaný s uctem a repository on Git?)
-----------------------
git clone https://github.com/libgit2/libgit2 mylibgit (klonovani existujiciho adresare do adresare mylibgit)
git diff (co je zmeneno ale zatím neni připraveno k zapsání)
git diff --cached ukáže změny, které už jsou připraveny k zapsání

git commit (urcen pro zapsani zmen nachystanych po prikazu git add do git image (repository))
git commit -a -m 'nejaky popis zmeny' (parametr -a vylucuje nutnost pouziti add a zapise veskere zmeny do commitu rovnou-nutna opatrnost)
git mv stare_jmeno_souboru nove_jmeno_souboru (prejmenovani souboru)
příklad(nutno včetně cesty) git mv src/utils/TextFile.txt src/utils/Notepad.txt

git rm --cached README (odstraneni souboru z prostoru sledovani zmen (napr opomenut do .gitignore))
git rm (odstraneni souboru z adresare) - pokud je jiz pripraven k zapsani, je treba pouzit parametr -f
git reset --hard (smaze veskere zmeny ve stage area tzn. vrátí odstraněné soubory apod.)

Nová větev
git branch <název>
    git branch pythonic_files
Dále možné přepínat se mezi větvemi příkazem git checkout 
 <nazev branch> (mozne vypsat větve příkazem git branch)
pokud nemame nainstalovany git graph mozno zobrazit stromovou strukturu prikazem:
git log --online --all --graph
---------------------
merge-spojovani větví (zalezi co vse bylo zmeneno) pokud 
 jsme zmenili master i dalsi je treba vice commitů
prepneme se do master verze prikazem git checkout master
tedy ulozime zmeny v master a pouzijeme prikaz:
 git merge <nazev spojovane vetve>
 git merge pythonic_files (hotovo :)
 nepotrebnou větev je dále možné odstranit příkazem:
 git branche -d <nazev branche>
 -----------------------
 REMOTE repository (GitHub etc.)
 zkontrolujeme zda uz je nebo neni nastaven uzivatel, remote apod.
 git config --list
 git remote
 dalsi prikazy viz níže po prikazu git clone...
 -------------
 Pripojeni noveho pc k remote repository
 nainstalovani gitu a nastaveni viz vyse (git config --list....)
 Nutne mit vygenerovany SSH klic (pouzivat sifrovane spojeni SSH!)
 spustit git bash 
 ssh-keygen -o 
 vygeneruje se v Users/<aktualni user>/.ssh 
 (vykopirovat vygenerovaný klíč příkazem) cat <nazev.pub> (type <nazev souboru>)a toto zkopirovat do github uctu
 klonování repozitáře:
 git clone <adresa z github zálozka SSH> (nastaveni vzdaleneho repozitare)
dojde ke stazeni repozitare do pc
dále muzeme vytvorit novou větev prikazem
git branch <název>
 a prepneme se do teto vetve
git checkout <název vetve>
nyni nejake zmeny a pak nutne zalozit novou branch v remote, to provedeme:
git remote
git push origin (selze pokud jsme vytvorili novou vetev, která není na remote a pouzijeme prikaz)
  git push --set-upstream origin <nazev branche> (vytvoříme vetev na remote a prepneme se do ni.)
   POZOR pri uprave v jinych nez mnou vytvorenych souborech, vznikaji konflikty!!!
------------------
Prace s nove pridanou vetvi na githubu z jineho pc
--------------------
Pokud na jinem pc pripojenem k projektu ve kterem vznikly nove vetve chceme pracovat s novou vetvi
 je treba nekoli kroku:
 git fetch (nacteni zmen na remote)
 git branch (vypise lokalni vetve)
 git branch -r(vypise vetve na remotu)
 git checkout origin/<nazev branche> (stav kdy se vetev zobrazi ale muzeme prohlizet ale ne zapisovat vetev neni 
  propojena mezi lokalem a remotem)
 (pro praci ve vetvi je treba prolinkovani tedy vytvoreni mistni vetve se stejnm nazvem 
  a nastaveni propojeni na remote vetev)
 (bud git branch <nazev vetve> a pak git merge <nazev vetve>)
 git checkout -b <nazev branch> origin/<nazev branch>(prepni se do branche a vytvor ji pokud 
  zde neni a propoj ji s remote branch)
 git branch (zkontrolujeme vetve)
 origin/branch - jsou jen pro cteni

git fetch (nacteni zmen oproti remote)
git pull (nacteni a slouceni zmen v pracovnim adresari-
 obsahuje dva prikazy git fetch a git merge)


git push -u origin master (odeslání na remote-doporucuji mit vse commited)

