
po instalaci apod. 
git config --list //prehled nastavenych pravidel
git config --global user.name "Petr Novák" //nastaveni jmena uzivatele gitu
git config --global user.email "petr@novek.com" 

Vytvoreni repository
git status
git init //spusteno v dannem prostoru (pokud jiz existuje tak je prepsan)
deli se na :
1)working area(mistni slozka-sem se dostaneme prikazem git init), 
2)stage area (sledovane ale necomittle po prikaze git add), 
3)local repository(zmeny propsane do gitu-) prikazem
git commit -m "e.g. Initial commit" (-m = message)
or
git config --global core.editor "'C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst -nosession" (prikaz nastavujici pojmenovani commitů pres aplikaci notepad-nastavuje ho defaultne)
-----------------------
git log (vypise podrobnosti a vsechny commity)
------------------------------
vymazani zaznamu HEAD (pri obnove smazaneho a sledovaneho souboru (vratime se k predchozimu commitu))
git reset HEAD slouzi pro navrat prikazu add
git checkout . se vrati k predchozimu commitu
git push (nahrava se na remote, ale musi již být napárovaný s uctem a repository on Git?)
-----------------------
git clone https://github.com/libgit2/libgit2 mylibgit (klonovani existujiciho adresare do adresare mylibgit)
git diff (co je zmeneno ale zatím neni připraveno k zapsání)
git diff --cached ukáže změny, které už jsou připraveny k zapsání

git commit (urcen pro zapsani zmen nachystanych po prikazu git add do git image (repository))
git commit -a -m 'nejaky popis zmeny' (parametr -a vylucuje nutnost pouziti add a zapise veskere zmeny do commitu rovnou-nutna opatrnost)
git mv stare_jmeno_souboru nove_jmeno_souboru (prejmenovani souboru)
příklad(nutno včetně cesty) git mv src/utils/TextFile.txt src/utils/Notepad.txt

git rm --cached README (odstraneni souboru z prostoru sledovani zmen (napr opomenut do .gitignore))
git rm (odstraneni souboru z adresare) - pokud je jiz pripraven k zapsani, je treba pouzit parametr -f
git reset --hard (smaze veskere zmeny ve stage area tzn. vrátí odstraněné soubory apod.)

Nová větev
git branch <název>
    git branch pythonic_files
Dále možné přepínat se mezi větvemi příkazem git checkout <nazev branch> (mozne vypsat větve příkazem git branch)